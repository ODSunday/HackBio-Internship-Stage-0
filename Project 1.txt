# PROJECT 1: BASh BASICS
#1. To print my name
$ echo ‘SUNDAY’

#2. To create a folder titled my name
$ mkdir sunday

#3. To create another new directory titled biocomputing and change to that directory with one line of command
$ mkdir biocomputing && cd biocomputing

#4. To download the 3 files, I used the 'wget' command as follows:
$ wget https://raw.githubusercontent.com/josoga2/dataset-repos/main/wildtype.fna https://raw.githubusercontent.com/josoga2/dataset-repos/main/wildtype.gbk https://raw.githubusercontent.com/josoga2/dataset-repos/main/wildtype.gbk

# Using the 'ls' command confirmed that the 3 files were successfully downloaded into the 'biocomputing' directory as 'wildtype.fna', 'wildtype.gbk', and 'wildtype.gbk.1'.

#5. To move the '.fna' file to the folder titled my name ('sunday')
$ mv wildtype.fna ../sunday/

# The '../' in the command was necssary to move the '.fna' from the 'biocomputing' directory to the 'sunday' folder since the two folders are in entirely different locations.
# 'ls' confirmed that only 'wildtype.gbk', and 'wildtype.gbk.1' remained in the pwd (i.e. 'biocomputing').
# Also, in the 'sunday' folder, 'ls' command confirmed the presence of the 'wildtype.fna' file.

#6. To delete the duplicate gbk file:
$ rm wildtype.gbk.1   # The two '.gbk' files in the 'biocomputer' folder were the same, so the duplicate file had the '.gbk.1' extension.

#7. To confirm if the '.fna' file is mutant or wild type (tatatata vs tata):
##a. I changed to 'sunday' folder containing the '.fna' file.
##b. Using the 'touch' and 'nano' commands, I created a new file (mutant_vs_wildtype.sh) containing the following bash code:

#!/bin/bash

if grep -q ‘tatatata’ wildtype.fna; then
    echo ‘mutant’
elif grep -q 'tata' wildtype.fna; then
    echo ‘wildtype’
fi
 
##c. Lasting, I ran the bash codes as follows:

$ bash mutant_vs_wildtype.sh

# Final result: mutant.

#8. If mutant, print all matching lines into a new file
$ grep ‘tatatata’ wildtype.fna > confirmed_mutant.fna

#9. Count number of lines (excluding header) in the '.gbk' file

## I returned to the 'biocomputing' folder containing the '.gbk' file.
## I ran the following command to count the number of lines in the file, excluding the header.
 
$ tail -n +2 wildtype.gbk | wc -l   ## The 'tail -n +2' command ommited the first line (header) in the 'wildtype.gbk' file to print from the second line. The 'wc -l' (lower case of L, not number 1) command printed remaining lines in the file. 

# Result: 5749 lines.

#10. Print the sequence length of the '.gbk' file. (Use the LOCUS tag in the first line)
$ grep "^LOCUS" wildtype.gbk | awk '{print $3}'  

# The grep "^LOCUS" wildtype.gbk makes grep to fish out the line starting with LOCUS in the file, while the awk '{print $3}' prints column 3 (the exact column containing the sequence length. 

# Result 197394 (197394bp).

#11. Print the source organism of the '.gbk' file. (Use the SOURCE tag in the first line).
$ awk '/^SOURCE/ { $1=""; sub(/^ */, ""); print }' wildtype.gbk 

# The /^SOURCE/ { ... } prints from the lines starting with SOURCE, while the $1="" deletes the first field (SOURCE) so it won't appear in the output, and the sub(/^ */, "") removes the leading spaces. Finally, the 'print' gives the final output as a clean line.

# Result: Staphylococcus aureus.

#12. List all the gene names of the '.gbk' file. Hint {grep '/gene='}
$ grep "/gene=" wildtype.gbk | cut -d'"' -f2 

# Adding the 'cut -d'"' -f2' command print exactly the gene names. 

#13. Clear your terminal space and print all commands used today.
$ clear # Or simply pressing 'ctrl L' to clear the terminal space.
# To print print all commands used today (today's history), first, I activated timestamps in my BASh environment as follows:
$ export HISTTIMEFORMAT="%F %T " # Note: the space between %T and " prevents the history (command) or content from being written together with the time in each line.

# Lastly, I printed today's history with the following command: 
$ history | grep "$(date +%F)" 

#14. List the files in the two folders. 
# I achieved the same result with either of the following methods:
#a. Using the 'ls' command while inside each of the two directories lists the files in each folder. 
$ ls # for each of in the pwd. 

#b. Returned to the base directory and input:
$ ls sunday
$ ls biocomputing  
 
# Results: (i.) Files inside 'sunday' folder: wildtype.fna, mutant_vs_wildtype.sh, and confirmed_mutant.fna. (ii.) File inside 'biocomputing' folder: wildtype.gbk.





















